security:
    password_hashers:
        App\User\Domain\Entity\User:
            algorithm: bcrypt
            cost: 12
            # O usar Argon2id si está disponible
            # algorithm: argon2id

    providers:
        # Define tu proveedor de usuarios con la nueva ubicación de la entidad User
        app_user_provider:
            entity:
                class: App\User\Domain\Entity\User
                property: email

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        # Firewall para la API que usará JWT
        api:
            pattern: ^/api
            stateless: true
            jwt: ~  # Esto activará la autenticación JWT para este firewall

        main:
            lazy: true
            provider: app_user_provider
            json_login:  # Este método proporciona una manera de autenticar mediante JSON
                check_path: /api/login
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
            logout:
                path: /logout
            # Otras configuraciones de seguridad pueden ser añadidas aquí según sea necesario

    access_control:
        - { path: ^/api/login, roles: PUBLIC_ACCESS }
        - { path: ^/api, roles: PUBLIC_ACCESS }

when@test:
    security:
        password_hashers:
            App\User\Domain\Entity\User: # Usa una configuración más rápida para las pruebas
                algorithm: auto
                cost: 4 # Valor más bajo posible para bcrypt
                time_cost: 3 # Valor más bajo posible para argon
                memory_cost: 10 # Valor más bajo posible para argon

