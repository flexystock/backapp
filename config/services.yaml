# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

parameters:

services:
    # Configuración predeterminada para autowire y autoconfigure
    _defaults:
        autowire: true
        autoconfigure: true

    # Autoload de los servicios de la aplicación
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # Configuración del LoginUserUseCase
    App\User\Application\UseCases\Auth\LoginUserUseCase:
        arguments:
            $userRepository: '@App\User\Application\OutputPorts\Repositories\UserRepositoryInterface'
            # Esta línea asegura que el password hasher sea inyectado automáticamente
            $passwordHasher: '@Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface'

    App\User\Application\UseCases\Auth\RegisterUserUseCase:
        arguments:
            $userRepositoryInterface: '@App\User\Infrastructure\OutputAdapters\Repositories\UserRepository'
            $passwordHasher: '@security.password_hasher'
            $validator: '@validator'

#    App\User\Infrastructure\InputAdapters\RegisterUserController:
#        arguments:
#            $registerUseCase: '@App\User\Application\RegisterUserUseCase'

    # Configura controladores para que sean públicos y tengan las etiquetas adecuadas
    App\User\Infrastructure\InputAdapters\:
        resource: '../src/User/Infrastructure/InputAdapters'
        tags: ['controller.service_arguments']
        public: true

    # Configura los servicios para el manejo de repositorios y tokens
    App\User\Infrastructure\OutputAdapters\Repositories\UserRepository:
        arguments:
            $registry: '@doctrine' # Este debe ser un alias para ManagerRegistry si es que está configurado así
        tags:
            - { name: 'doctrine.repository_service' }

    App\User\Infrastructure\OutputAdapters\JWTTokenManager:
        arguments:
            - '%env(APP_SECRET)%'
    # Configuración de servicios para la sección de Client
    App\Client\Application\UseCases\CreateClientUseCase:
        arguments:
            $clientRepository: '@App\Client\Application\OutputPorts\Repositories\ClientRepositoryInterface'

    App\Client\Infrastructure\InputAdapters\CreateClientController:
        arguments:
            $createClientUseCase: '@App\Client\Application\UseCases\CreateClientUseCase'

    App\Client\Infrastructure\InputAdapters\:
        resource: '../src/Client/Infrastructure/InputAdapters'
        tags: [ 'controller.service_arguments' ]
        public: true

    App\Client\Infrastructure\OutputAdapters\Repositories\ClientRepository:
        arguments:
            $registry: '@doctrine'
        tags:
            - { name: 'doctrine.repository_service' }

    App\Client\Application\OutputPorts\Repositories\ClientRepositoryInterface:
        alias: App\Client\Infrastructure\OutputAdapters\Repositories\ClientRepository

    App\MessageHandler\CreateDockerContainerMessageHandler:
        tags: [ 'messenger.message_handler']

    App\Service\DockerService:
        arguments:
            $logger: '@logger'
            $clientRepository: '@App\Client\Application\OutputPorts\Repositories\ClientRepositoryInterface'
            $projectDir: '%kernel.project_dir%'

    App\User\Application\OutputPorts\NotificationServiceInterface:
        alias: App\User\Infrastructure\OutputAdapters\Services\EmailNotificationService

    App\User\Application\InputPorts\RequestPasswordResetInterface:
        alias: App\User\Application\UseCases\Password\RequestPasswordResetUseCase

    App\User\Application\InputPorts\ResetPasswordInterface:
        alias: App\User\Application\UseCases\Password\ResetPasswordUseCase

    # OutputPorts Implementations
    App\User\Application\OutputPorts\PasswordResetRepositoryInterface:
        alias: App\User\Infrastructure\OutputAdapters\Repositories\PasswordResetRepository

    App\User\Application\OutputPorts\Repositories\UserRepositoryInterface:
        alias: App\User\Infrastructure\OutputAdapters\Repositories\UserRepository

    # Controladores
    App\User\Infrastructure\InputAdapters\PasswordResetController:
        tags: [ 'controller.service_arguments' ]

    App\EventSubscriber\MailSentSubscriber:
        tags: [ 'kernel.event_subscriber' ]

    App\User\Application\InputPorts\GetUserClientsInterface:
        alias: App\User\Application\UseCases\GetUserClientsUseCase

    # Controlador
    App\User\Infrastructure\InputAdapters\GenericUserController:
        tags: [ 'controller.service_arguments' ]

    App\EventListener\JWTCreatedListener:
        tags:
            - { name: 'kernel.event_listener', event: 'lexik_jwt_authentication.on_jwt_created', method: 'onJWTCreated' }
    App\EventListener\JWTDecodedListener:
        tags:
            - { name: 'kernel.event_listener', event: 'lexik_jwt_authentication.on_jwt_decoded', method: 'onJWTDecoded' }
    App\EventListener\ClientAccessListener:
        tags:
            - { name: 'kernel.event_listener', event: 'kernel.request', method: 'onKernelRequest', priority: 10 }
    App\User\Application\UseCases\Auth\SelectClientUseCase:
        arguments:
            $jwtManager: '@lexik_jwt_authentication.jwt_manager'
        tags: [ 'app.use_case' ]

    App\User\Infrastructure\InputAdapters\AuthController:
        public: true
        autowire: true
        autoconfigure: true
        tags: [ 'controller.service_arguments' ]
